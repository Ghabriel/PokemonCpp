const typeTable = [
    [ 1, 1, 1, 1, 1, 0.5, 1, 0, 0.5, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
    [ 2, 1, 0.5, 0.5, 1, 2, 0.5, 0, 2, 1, 1, 1, 1, 0.5, 2, 1, 2, 0.5 ],
    [ 1, 2, 1, 1, 1, 0.5, 2, 1, 0.5, 1, 1, 2, 0.5, 1, 1, 1, 1, 1 ],
    [ 1, 1, 1, 0.5, 0.5, 0.5, 1, 0.5, 0, 1, 1, 2, 1, 1, 1, 1, 1, 2 ],
    [ 1, 1, 0, 2, 1, 2, 0.5, 1, 2, 2, 1, 0.5, 2, 1, 1, 1, 1, 1 ],
    [ 1, 0.5, 2, 1, 0.5, 1, 2, 1, 0.5, 2, 1, 1, 1, 1, 2, 1, 1, 1 ],
    [ 1, 0.5, 0.5, 0.5, 1, 1, 1, 0.5, 0.5, 0.5, 1, 2, 1, 2, 1, 1, 2, 0.5 ],
    [ 0, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 0.5, 1 ],
    [ 1, 1, 1, 1, 1, 2, 1, 1, 0.5, 0.5, 0.5, 1, 0.5, 1, 2, 1, 1, 2 ],
    [ 1, 1, 1, 1, 1, 0.5, 2, 1, 2, 0.5, 0.5, 2, 1, 1, 2, 0.5, 1, 1 ],
    [ 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 0.5, 0.5, 1, 1, 1, 0.5, 1, 1 ],
    [ 1, 1, 0.5, 0.5, 2, 2, 0.5, 1, 0.5, 0.5, 2, 0.5, 1, 1, 1, 0.5, 1, 1 ],
    [ 1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 2, 0.5, 0.5, 1, 1, 0.5, 1, 1 ],
    [ 1, 2, 1, 2, 1, 1, 1, 1, 0.5, 1, 1, 1, 1, 0.5, 1, 1, 0, 1 ],
    [ 1, 1, 2, 1, 2, 1, 1, 1, 0.5, 0.5, 0.5, 2, 1, 1, 0.5, 2, 1, 1 ],
    [ 1, 1, 1, 1, 1, 1, 1, 1, 0.5, 1, 1, 1, 1, 1, 1, 2, 1, 0 ],
    [ 1, 0.5, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 0.5, 0.5 ],
    [ 1, 2, 1, 0.5, 1, 1, 1, 1, 0.5, 0.5, 1, 1, 1, 1, 1, 2, 2, 1 ],
];

const typeMapping = {
    "Normal": 1,
    "Fighting": 2,
    "Flying": 3,
    "Poison": 4,
    "Ground": 5,
    "Rock": 6,
    "Bug": 7,
    "Ghost": 8,
    "Steel": 9,
    "Fire": 10,
    "Water": 11,
    "Grass": 12,
    "Electric": 13,
    "Psychic": 14,
    "Ice": 15,
    "Dragon": 16,
    "Dark": 17,
    "Fairy": 18,
};

enum StatFlags {
    All,
    IgnorePositive,
    IgnoreNegative
}

export function getStatStageMultiplier(stage: number): number {
    const absStage = Math.abs(stage);

    if (stage >= 0) {
        return (2 + absStage) / 2;
    } else {
        return 2 / (2 + absStage);
    }
}

export function getAccuracyStatStageMultiplier(stage: number): number {
    const absStage = Math.abs(stage);

    if (stage >= 0) {
        return (3 + absStage) / 3;
    } else {
        return 3 / (3 + absStage);
    }
}
